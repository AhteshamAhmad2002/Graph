#include <iostream>
#include <vector>
#include <queue>
using namespace std;

int orangesRotting(vector<vector<int>>& grid) {
    int rows = grid.size();
    int cols = grid[0].size();

    queue<pair<int, int>> q; // {row, col}
    int freshCount = 0;

    // Step 1: Count fresh oranges and push all rotten oranges into queue
    for (int i = 0; i < rows; ++i) {
        for (int j = 0; j < cols; ++j) {
            if (grid[i][j] == 2) {
                q.push({i, j});
            } else if (grid[i][j] == 1) {
                freshCount++;
            }
        }
    }

    if (freshCount == 0) return 0; // No fresh oranges to rot

    int minutes = 0;
    vector<pair<int, int>> directions = {{-1,0}, {1,0}, {0,-1}, {0,1}};

    // Step 2: BFS traversal
    while (!q.empty()) {
        int size = q.size();
        bool rotted = false;

        for (int i = 0; i < size; ++i) {
            auto [r, c] = q.front(); q.pop();

            for (auto [dr, dc] : directions) {
                int nr = r + dr;
                int nc = c + dc;

                if (nr >= 0 && nr < rows && nc >= 0 && nc < cols && grid[nr][nc] == 1) {
                    grid[nr][nc] = 2;
                    q.push({nr, nc});
                    freshCount--;
                    rotted = true;
                }
            }
        }

        if (rotted) minutes++;
    }

    return freshCount == 0 ? minutes : -1;
}

int main() {
    vector<vector<int>> grid = {
        {2,1,1},
        {1,1,0},
        {0,1,1}
    };

    int result = orangesRotting(grid);
    cout << "Minutes to rot all oranges: " << result << endl;

    return 0;
}
